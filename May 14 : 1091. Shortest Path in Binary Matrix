public class Solution {
    public int ShortestPathBinaryMatrix(int[][] grid) {
        if (grid[0][0] == 1) return -1; 
        
        int r = grid.Length;
        int c = grid[0].Length;
        
        var q = new Queue<(int x, int y)>();
        int result = 0;
        
        q.Enqueue((0,0)); // starting point
        
        while (q.Count > 0)
        {
            int count = q.Count;
            result++; // count a step each time that the eight sides are processed
            for (int i = 0; i < count; i++)
            {
                var p = q.Dequeue();
                // check if out of range, blocked or visited
                if (p.x < 0 || p.x >= r || p.y < 0 || p.y >= c ||
                    grid[p.x][p.y] != 0) 
                    continue;
                
				// check if found the end
                if (p.x == r-1 && p.y == c-1) return result;
                
               
                grid[p.x][p.y] = -1; // visited
                
                q.Enqueue((p.x+1, p.y)); // right
                q.Enqueue((p.x+1, p.y+1)); // right/down
                q.Enqueue((p.x, p.y+1)); // down
                q.Enqueue((p.x-1, p.y+1)); // left/down
                q.Enqueue((p.x-1, p.y)); // left
                q.Enqueue((p.x-1, p.y-1)); // left/up
                q.Enqueue((p.x, p.y-1)); // up
                q.Enqueue((p.x+1, p.y-1)); // right/up                
            }
        }        
        return -1;         
    }
}
