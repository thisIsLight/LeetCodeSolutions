var NumMatrix = function(matrix) {
    this.matrix = matrix
};

/** 
 * @param {number} row1 
 * @param {number} col1 
 * @param {number} row2 
 * @param {number} col2
 * @return {number}
 */
NumMatrix.prototype.sumRegion = function(row1, col1, row2, col2) {
    let sum = 0
    for(let i=row1;i<=row2;i++){
        for(let j=col1;j<=col2;j++){
            sum+=this.matrix[i][j]
        }
    }
    
    return sum
};

//DP solution -

var NumMatrix = function(matrix) {
    this.matrix = matrix
    this.dp = []
    this.computesummat()
};

NumMatrix.prototype.computesummat = function(){
    for(let i=0;i<this.matrix.length;i++){
        this.dp.push([])
        for(let j=0;j<this.matrix[0].length;j++){
            if(i===0 && j === 0){
                this.dp[i][j] = this.matrix[i][j]
            }
            else if(i===0){
                this.dp[i][j] = this.dp[i][j-1]+ this.matrix[i][j]
            }
            else if(j===0){
                this.dp[i][j] = this.dp[i-1][j]+ this.matrix[i][j]
            }
            else{
                this.dp[i][j] = this.dp[i-1][j] + this.dp[i][j-1] + this.matrix[i][j] - this.dp[i-1][j-1]
            }
        }
    }
}
NumMatrix.prototype.sumRegion = function(row1, col1, row2, col2) {
    
        let totalArea = this.dp[row2][col2];
        let topArea = row1 > 0 ? this.dp[row1-1][col2] : 0;
        let sideArea = col1 > 0 ? this.dp[row2][col1-1] : 0;
        let cornerArea = row1 > 0 && col1 > 0 ? this.dp[row1-1][col1-1] : 0;

        return totalArea - topArea - sideArea + cornerArea;
};
