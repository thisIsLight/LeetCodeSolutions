public class Solution 
{
	private int N;
	public int TotalNQueens(int n) 
	{
		N = n;
		int[] res = new int[1];
		char[][] board = new char[N][];
		for (int i = 0; i < N; i++)
		{
			board[i] = new char[N];
			Array.Fill(board[i], '.');
		}

		Helper(res, board, 0);
        return res[0];
	}

	private void Helper(int[] res, char[][] board, int rowIndex)
	{
		if (rowIndex == N)
		{
            res[0] = res[0]+1;
            return;
		}

		for (int colIndex = 0; colIndex < N; colIndex++)
		{
			if (IsValid(board, rowIndex, colIndex))
			{
				board[rowIndex][colIndex] = 'Q';
				Helper(res, board, rowIndex + 1);
				board[rowIndex][colIndex] = '.';
			}
		}
        return;
	}

	private bool IsValid(char[][] board, int rowIndex, int colIndex)
	{
		for (int i = 0; i < rowIndex; i++)
			if (board[i][colIndex] == 'Q') return false;

		for (int i = rowIndex - 1, j = colIndex - 1; i >= 0 && j >= 0; i--, j--)
			if (board[i][j] == 'Q') return false;

		for (int i = rowIndex - 1, j = colIndex + 1; i >= 0 && j < N; i--, j++)
		{
			if (board[i][j] == 'Q') return false;
		}

		return true;
	}
}
