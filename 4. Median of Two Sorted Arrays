var findMedianSortedArrays = function(nums1, nums2) {
    
    //preparing the merged array
    let mergedArr = []
    let index1 = 0
    let index2 = 0
    for(let i=0; i<(nums1.length+nums2.length); i++){
        if(index1<nums1.length && index2<nums2.length){
            if(nums1[index1] <= nums2[index2]){
                mergedArr.push(nums1[index1])
                index1++
            }
            else{
                mergedArr.push(nums2[index2])
                index2++
            }
        }
        else if(index1<nums1.length){
            mergedArr.push(nums1[index1])
            index1++
        }
        else{
            mergedArr.push(nums2[index2])
            index2++
        }
    }
    
    let j = mergedArr.length - 1
    for(let i=0; i<mergedArr.length; i++){
        if(i==j){
            return mergedArr[i]
        }
        if(i==j-1){
            return (mergedArr[i]+mergedArr[j])/2
        }
        j--;
    }
    return 0
    
};


//Simple solution but higher time complexity - 90 seconds - Accepted by Leetcode
/*
var findMedianSortedArrays = function(nums1, nums2) {
    let len1 = nums1.length
    let len2 = nums2.length
    
    if(len1 === 0 && len2 === 0){
        return 0
    }
    let mergedArr = []
    let i = 0
    let j = 0
    while(i<len1 && j<len2){
        if(nums1[i]<=nums2[j]){
            mergedArr.push(nums1[i])
            i++
        }
        else{
            mergedArr.push(nums2[j])
            j++            
        }
    }
    while(i<len1){
        mergedArr.push(nums1[i])
        i++
    }
    while(j<len2){
        mergedArr.push(nums2[j])
        j++
    }
    
    if((len1+len2)%2 === 0){
        return (mergedArr[(len1+len2)/2]+mergedArr[(len1+len2)/2-1])/2
    }
    else{
        return mergedArr[Math.floor((len1+len2)/2)]
    }
};
*/
