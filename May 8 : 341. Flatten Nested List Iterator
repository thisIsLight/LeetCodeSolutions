public class NestedIterator 
{
    
    private Stack<NestedInteger> stack;
    private bool hasNext;
    private int elem;
    
    public NestedIterator(IList<NestedInteger> nestedList) 
    {
        stack = new Stack<NestedInteger>();
        hasNext = false;
        elem = 0;
        
        for (int i = nestedList.Count - 1; i >= 0; i--)
        {
            stack.Push(nestedList[i]);
        }
    }

    public bool HasNext() 
    {
        if (hasNext)
        {
            return true;
        }
        FindNext();
        return hasNext;
    }

    public int Next() 
    {
        if (!hasNext) 
        {
           FindNext(); 
        }
        
        hasNext = false;
        return elem;
    }
    
    private void FindNext()
    {
        while (stack.Count > 0)
        {
            var top = stack.Pop();
            if (top.IsInteger())
            {
                elem = top.GetInteger();
                hasNext = true;
                return;
            }
            var currList = top.GetList();
            for (int i = currList.Count - 1; i >= 0; i--)
            {
                stack.Push(currList[i]);
            }
        }
        hasNext = false;
    }
}
